package ${package.Controller};


import ${package.Entity}.${entity};
import org.springframework.web.bind.annotation.*;
import com.alibaba.fastjson.JSONObject;
import java.io.Serializable;
import com.gx.dataI.common.enums.CodeEnum;
import com.gx.dataI.common.utils.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
//引入Service
import ${package.Service}.${table.serviceName};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "$!{table.comment} 前端控制器")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} service;

    @ResponseBody
    @RequestMapping(value = "/list",method = {RequestMethod.GET,RequestMethod.POST})
    @ApiOperation(value = "$!{table.comment} 列表")
    @ApiImplicitParams({
    @ApiImplicitParam(paramType = "query",name = "jsonData",value = "get请求传的参数接收字符串，post请求也可以通过url的方式传",dataType = "string"),
    @ApiImplicitParam(paramType = "body",name = "parms",value = "post请求传的参数接收的是JSON对象，不能通过get请求传",dataType = "string")})
    public Result list(@RequestParam(required = false) String jsonData, @RequestBody(required = false) JSONObject parms){
        if(jsonData!=null&&parms==null){
            parms = JSONObject.parseObject(jsonData);
        }
        if (parms==null){
            parms = new JSONObject();
        }
        return new Result(CodeEnum.SUCCESS.getCode(),service.list(parms));
    }

    @ResponseBody
    @RequestMapping(value = "/save",method = {RequestMethod.POST})
    @ApiOperation(value = " 添加")
    public Result save(${entity} entity){
        return service.save(entity)>0?new Result(CodeEnum.SUCCESS.getCode(),"添加成功！"):new Result(CodeEnum.LOGIN_EXCEPTION.getCode(),"添加失败！");
    }
    @ResponseBody
    @RequestMapping(value = "/delete",method = {RequestMethod.POST})
    @ApiOperation(value = " 删除")
    @ApiImplicitParams({
    @ApiImplicitParam(paramType = "form",name = "pks",value = "删除的id，用逗号隔开",dataType = "string",required = true)})
    public Result delete(@RequestParam(required = true) Serializable[] pks){
        return service.delete(pks)>0?new Result(CodeEnum.SUCCESS.getCode(),"删除成功！"):new Result(CodeEnum.LOGIN_EXCEPTION.getCode(),"删除失败！");
    }
    @ResponseBody
    @RequestMapping(value = "/update",method = {RequestMethod.POST})
    @ApiOperation(value = " 修改")
    public Result update(${entity} entity){
        return service.update(entity)>0?new Result(CodeEnum.SUCCESS.getCode(),"修改成功！"):new Result(CodeEnum.LOGIN_EXCEPTION.getCode(),"修改失败！");
    }
}

#end